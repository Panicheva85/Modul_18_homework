# Напишите программу, которой на вход подается последовательность чисел через пробел, а также запрашивается у пользователя любое число.
# В качестве задания повышенного уровня сложности можете выполнить проверку соответствия указанному в условии ввода данных.
# Далее программа работает по следующему алгоритму:
# Преобразование введённой последовательности в список
# Сортировка списка по возрастанию элементов в нем (для реализации сортировки определите функцию)
# Устанавливается номер позиции элемента, который меньше введенного пользователем числа, а следующий за ним больше или равен этому числу.
# При установке позиции элемента воспользуйтесь алгоритмом двоичного поиска, который был рассмотрен в этом модуле. Реализуйте его также отдельной функцией.
# Подсказка
# Помните, что у вас есть числа, которые могут не соответствовать заданному условию.
# В этом случае необходимо вывести соответствующее сообщение

array = input('Введите список чисел через пробел: ').split()
num_list = list(map(int, array))

while True:
    try:
        number = int(input("Введите любое число от 0 до 99:"))
        smallest = min(num_list)
        biggest = max(num_list)
        if number < 0 or number > 99 or smallest >= number or number > biggest:
            raise Exception
        break
    except ValueError:
        print("Нужно ввести число!")
    except Exception:
        print("Введен неправильный диапазон числа или число не попадает в границы минимального и максимального числа введенного списка !")

num_list.append(number)

for i in range(len(num_list)):
    idx_min = i
    for j in range(i, len(num_list)):
        if num_list[j] < num_list[idx_min]:
            idx_min = j
    if i != idx_min:
        num_list[i], num_list[idx_min] = num_list[idx_min], num_list[i]
print(num_list)

def bi_search(a, array) -> int:
    left, right = 0, len(array)
    if left > right:  # если левая граница превысила правую,
        return False
    while left < right:
        middle = (left + right) // 2
        if array[middle] < a:
            left = middle + 1
        else:
            right = middle
    return left - 1

print('Ответ: номер позиции элемента, который меньше введенного пользователем числа, '
      'а следующий за ним больше или равен этому числу - ', bi_search(number, num_list))


